<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"

	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	xmlns:util="http://www.springframework.org/schema/util">

	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->


	<!-- ========================= Start of PERSISTENCE DEFINITIONS ========================= -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:projectConstants.properties</value>
			</list>
		</property>
	</bean>


	<!-- DataSource Definition -->

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${database.connection.driver}" />
		<property name="jdbcUrl" value="${database.connection.url}" />
		<property name="user" value="${database.connection.username}" />
		<property name="password" value="${database.connection.password}" />
		<property name="acquireIncrement" value="${database.connection.acquireIncrement}" />
		<property name="initialPoolSize" value="${database.connection.initialPoolSize}" />
		<property name="maxIdleTime" value="${database.connection.maxIdleTime}" />
		<property name="maxPoolSize" value="${database.connection.maxPoolSize}" />
		<property name="maxStatements" value="${database.connection.maxStatements}" />
		<property name="minPoolSize" value="${database.connection.minPoolSize}" />
		<property name="idleConnectionTestPeriod"
			value="${database.connection.idleConnectionTestPeriod}" />
		<property name="preferredTestQuery" value="${database.connection.preferredTestQuery}" />
		<property name="maxAdministrativeTaskTime"
			value="${database.connection.maxAdministrativeTaskTime}" />
		<property name="unreturnedConnectionTimeout"
			value="${database.connection.unreturnedConnectionTimeout}" />
		<property name="debugUnreturnedConnectionStackTraces"
			value="${database.connection.debugUnreturnedConnectionStackTraces}" />
	</bean>

	<bean id="kullanici" class="com.emin.yuce.model.Kullanici"></bean>
	<bean id="user" class="com.emin.yuce.model.User"></bean>

	<!-- Hibernate SessionFactory Definition -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.emin.yuce.model</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="c3p0.acquire_increment">1</prop>
				<prop key="c3p0.idle_test_period">120</prop>
				<prop key="c3p0.max_size">50</prop>
				<prop key="c3p0.max_statements">0</prop>
				<prop key="c3p0.min_size">20</prop>
				<prop key="c3p0.timeout">0</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.cglib.use_reflection_optimizer">true</prop>
				<prop key="hibernate.connection.autocommit">true</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop>
				<prop key="hibernate.validator.apply_to_ddl">
					false
				</prop>
				<prop key="hibernate.validator.autoregister_listeners">
					false
				</prop>
			</props>
		</property>

	</bean>
	<!-- Spring Data Access Exception Translator Defintion -->

	<bean id="jdbcExceptionTranslator"
		class="org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- Hibernate Template Defintion -->

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="jdbcExceptionTranslator" ref="jdbcExceptionTranslator" />
	</bean>

	<!-- Hibernate Transaction Manager Definition -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
<!--
	<bean id="userDaoImpl" class="com.emin.yuce.dao.impl.UserDAOImpl">
		<constructor-arg value="com.emin.yuce.model.User"></constructor-arg>
		<property name="hibernateTemplate" ref="hibernateTemplate"></property>
	</bean>

	<bean id="alarmHandlerJob" class="com.emin.yuce.scheduling.AlarmHandlerJob">
		<property name="userDAOImpl" ref="userDaoImpl"></property>
		<property name="taskExecutor" ref="taskExecutor"></property>
	</bean>
-->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		  <property name="corePoolSize" value="50" />
		  <property name="maxPoolSize" value="60" />
		  <property name="queueCapacity" value="50" />
    </bean>
		
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<!-- see the example of method invoking job above -->
		<property name="jobDetail" ref="jobDetail" />
		<!-- 1 seconds -->
		<property name="startDelay" value="${startDelay}" />
		<!-- repeat every 1 seconds -->
		<property name="repeatInterval" value="${repeatInterval}" />
	</bean>

	<bean id="jobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="urlHandlerJob" />
		<property name="targetMethod" value="downloadUrlAndSave" />
		<property name="concurrent" value="${concurrent}" />
	</bean>

	<bean id="urlHandlerJob" class="com.emin.yuce.scheduling.UrlHandlerJob">
	    <property name="httpClient" ref="httpClientImpl" />
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="autoStartup" value="true" />
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
				<ref bean="simpleTrigger" />
			</list>
		</property>
	</bean>

	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="exampleJob" />
		<!-- run every morning at 6 AM -->
		<property name="cronExpression" value="3 * * * * ?" />
	</bean>

	<bean name="exampleJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="com.emin.yuce.scheduling.EmailJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="timeout" value="5" />
			</map>
		</property>
	</bean>

	
	
	<bean id="httpClientImpl" class="com.emin.yuce.service.impl.HttpClientImpl">

	</bean>
	
	



</beans>
