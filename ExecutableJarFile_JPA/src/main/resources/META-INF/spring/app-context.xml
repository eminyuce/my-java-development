<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"

	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	xmlns:util="http://www.springframework.org/schema/util">

	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- Scans for application @Components to deploy -->
	<context:component-scan base-package="com.emin.yuce" />

	<!-- ========================= Start of PERSISTENCE DEFINITIONS ========================= -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:projectConstants.properties</value>
			</list>
		</property>
	</bean>

	<!-- Instructs Spring to perfrom declarative transaction management on annotated 
		classes -->
	<tx:annotation-driven />

	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="jpaTest" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${database.connection.driver}" />
		<property name="jdbcUrl" value="${database.connection.url}" />
		<property name="user" value="${database.connection.username}" />
		<property name="password" value="${database.connection.password}" />
		<property name="acquireIncrement" value="${database.connection.acquireIncrement}" />
		<property name="initialPoolSize" value="${database.connection.initialPoolSize}" />
		<property name="maxIdleTime" value="${database.connection.maxIdleTime}" />
		<property name="maxPoolSize" value="${database.connection.maxPoolSize}" />
		<property name="maxStatements" value="${database.connection.maxStatements}" />
		<property name="minPoolSize" value="${database.connection.minPoolSize}" />
		<property name="idleConnectionTestPeriod"
			value="${database.connection.idleConnectionTestPeriod}" />
		<property name="preferredTestQuery" value="${database.connection.preferredTestQuery}" />
		<property name="maxAdministrativeTaskTime"
			value="${database.connection.maxAdministrativeTaskTime}" />
		<property name="unreturnedConnectionTimeout"
			value="${database.connection.unreturnedConnectionTimeout}" />
		<property name="debugUnreturnedConnectionStackTraces"
			value="${database.connection.debugUnreturnedConnectionStackTraces}" />
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="autoStartup" value="true" />
		<property name="triggers">
			<list>
				<ref bean="simpleTrigger" />
			</list>
		</property>
	</bean>
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<!-- see the example of method invoking job above -->
		<property name="jobDetail" ref="jobDetail" />
		<!-- 1 seconds -->
		<property name="startDelay" value="${startDelay}" />
		<!-- repeat every 1 seconds -->
		<property name="repeatInterval" value="${repeatInterval}" />
	</bean>

	<bean id="jobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="alarmHandlerJob" />
		<property name="targetMethod" value="checkAlarmsFromDB" />
		<property name="concurrent" value="${concurrent}" />
	</bean>

	<bean id="alarmHandlerJob" class="com.emin.yuce.scheduling.AlarmHandlerJob">
	</bean>
	
	<bean id="searchProcessor" class="com.googlecode.genericdao.search.jpa.JPASearchProcessor">
		<constructor-arg ref="metadataUtil" />
	</bean>
	
	<bean id="metadataUtil" class="com.googlecode.genericdao.search.jpa.hibernate.HibernateMetadataUtil"
		factory-method="getInstanceForEntityManagerFactory">
		<constructor-arg ref="entityManagerFactory" />
	</bean>
</beans>
